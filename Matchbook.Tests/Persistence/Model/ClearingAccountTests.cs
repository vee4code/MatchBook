using Matchbook.Model;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using Xunit;

using static Matchbook.Tests.Persistence.EntityAssertions;

namespace Matchbook.Tests.Persistence.Model
{
    public class ClearingAccountTests : PersistenceTestBase
    {
        private readonly DbContextFixture fixture;

        public ClearingAccountTests(DbContextFixture fixture)
        {
            this.fixture = fixture;
        }

        [Fact]
        public void CanCrudClearingAccount()
        {
            VerifyCrudOperationsOn(
                fixture,
                DataGenerator.NewClearingAccount(),
                x => x.Id,
                x => x.Type = ClearingAccountType.Clearing,
                x => x.Type == ClearingAccountType.Clearing);
        }

        [Fact]
        public void ClearingAccountIdIsAutogenerated()
        {
            var account = DataGenerator.NewClearingAccount();
            using (var dbContext = fixture.NewDbContext())
            {
                dbContext.ClearingAccounts.Add(account);
                dbContext.SaveChanges();

                Assert.True(account.Id > 0);
            }

            using (var dbContext = fixture.NewDbContext())
            {
                Assert.True(dbContext.ClearingAccounts.Any(ca => ca.Id == account.Id));
            }
        }

        [Fact]
        public void ClearingAccountCodeShouldBeUnique()
        {
            var account = GivenASavedClearingAccount();

            using (var dbContext = fixture.NewDbContext())
            {
                var newAccount = DataGenerator.NewClearingAccount();
                newAccount.Code = account.Code;
                dbContext.ClearingAccounts.Add(newAccount);
                Assert.Throws<DbUpdateException>(() => dbContext.SaveChanges());
            }
        }

        private ClearingAccount GivenASavedClearingAccount()
        {
            var account = DataGenerator.NewClearingAccount();
            using (var dbContext = fixture.NewDbContext())
            {
                dbContext.ClearingAccounts.Add(account);
                dbContext.SaveChanges();
            }
            return account;
        }

        [Fact]
        public void EnumsAreSavedAsStrings()
        {
            var account = GivenASavedClearingAccount();

            using var dbContext = fixture.NewDbContext();
            using var reader = dbContext.Database.ExecuteSqlQuery($"select {nameof(ClearingAccount.Type)} from ClearingAccounts as o where o.Id = ({account.Id})");

            Assert.True(reader.Read());     // We only expect 1 response
            Assert.Equal(account.Type.ToString(), reader.DbDataReader[nameof(ClearingAccount.Type)]);
        }
    }
}
